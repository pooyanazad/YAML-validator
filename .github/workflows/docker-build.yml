name: Docker Build and Push

on:
  schedule:
    - cron: '20 10 * * *'
  # Allow manual trigger
  workflow_dispatch:
  # Run on push to main for testing
  push:
    branches: [ main ]

permissions:
  contents: write
  packages: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: pooyanazad/yaml-checker

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Print current time
      run: |
        echo "Current UTC time: $(date -u)"
        echo "Current local time: $(date)"
        echo "Timezone info: $(date +%Z %z)"
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Generate version number
      id: version
      run: |
        # Fetch all tags from remote
        git fetch --tags
        
        # Get current date for version
        DATE=$(date +%Y%m%d)
        
        # Get the latest tag that matches our pattern
        LATEST_TAG=$(git tag -l "v1.0.*-*" | sort -V | tail -n 1)
        
        if [ -z "$LATEST_TAG" ]; then
          # No previous tags, start with v1.0.2
          PATCH_VERSION=2
        else
          # Extract patch version from latest tag (e.g., v1.0.3-20250805 -> 3)
          PATCH_VERSION=$(echo $LATEST_TAG | sed 's/v1\.0\.\([0-9]*\)-.*/\1/')
          # Extract date from latest tag
          LATEST_DATE=$(echo $LATEST_TAG | sed 's/v1\.0\.[0-9]*-\(.*\)/\1/')
          
          # If running on the same date as latest tag, increment patch version
          # Otherwise, increment patch version for new date
          PATCH_VERSION=$((PATCH_VERSION + 1))
          
          # Check if the generated version already exists and increment if needed
          while git tag -l "v1.0.${PATCH_VERSION}-${DATE}" | grep -q "v1.0.${PATCH_VERSION}-${DATE}"; do
            PATCH_VERSION=$((PATCH_VERSION + 1))
          done
        fi
        
        VERSION="v1.0.${PATCH_VERSION}-${DATE}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Generated version: ${VERSION}"
        echo "Previous latest tag: ${LATEST_TAG}"
        echo "New patch version: ${PATCH_VERSION}"
        echo "Date: ${DATE}"
        
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: |
          ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image with clean YAML
      run: |
        echo "Testing with clean YAML file..."
        docker run --rm -v "${{ github.workspace }}:/data" \
          ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} \
          /data/tests/test3_clean.yaml
          
    - name: Test Docker image with problematic YAML
      run: |
        echo "Testing with problematic YAML file (should show issues)..."
        docker run --rm -v "${{ github.workspace }}:/data" \
          ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} \
          /data/tests/test1_issues.yaml || true
          
    - name: Test Docker image with security test
      run: |
        echo "Testing with security test file..."
        docker run --rm -v "${{ github.workspace }}:/data" \
          ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} \
          /data/tests/security_test1.yaml || true
          
    - name: Login to Docker Hub
      if: github.event_name == 'schedule'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Push Docker image
      if: github.event_name == 'schedule'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Create GitHub Release
      if: github.event_name == 'schedule'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          ## YAML Validator Release ${{ steps.version.outputs.version }}
          
          ### Docker Images
          - `${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}`
          - `${{ env.IMAGE_NAME }}:latest`
          
          ### Features
          - YAML syntax validation
          - Linting with yamllint
          - Security scanning with Checkov
          - Cross-platform Docker support
          
          ### Usage
          ```bash
          # Git Bash on Windows
          MSYS_NO_PATHCONV=1 docker run -v "${PWD}:/data" ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} /data/your_file.yaml
          
          # PowerShell/CMD on Windows
          docker run -v "${PWD}:/data" ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} /data/your_file.yaml
          
          # Linux/macOS
          docker run -v "$(pwd):/data" ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} /data/your_file.yaml
          ```
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Latest**: ${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests**: Passed âœ…" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          echo "- **Status**: Pushed to Docker Hub ðŸš€" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status**: Build only (push skipped for non-scheduled runs)" >> $GITHUB_STEP_SUMMARY
        fi
